import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

dotenv.config()

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function fixNewPlayerImages() {
  console.log('üîß Fixing new player images...')

  try {
    // Fix Pijus Srƒóbalius image URL (remove extra space)
    const { data: pijusData, error: pijusError } = await supabase
      .from('banga_playerss')
      .update({
        image_url: 'https://phvjdfqxzitzohiskwwo.supabase.co/storage/v1/object/public/Teamplayers/Pijus%20Srebalius%201.png'
      })
      .eq('name', 'Pijus Srƒóbalius')
      .eq('team_key', 'BANGA A')

    if (pijusError) {
      console.error('‚ùå Error updating Pijus Srƒóbalius:', pijusError)
    } else {
      console.log('‚úÖ Updated Pijus Srƒóbalius image URL')
    }

    // Fix Lukas Grinkeviƒçius image URL (remove extra space and newline)
    const { data: lukasData, error: lukasError } = await supabase
      .from('banga_playerss')
      .update({
        image_url: 'https://phvjdfqxzitzohiskwwo.supabase.co/storage/v1/object/public/Teamplayers/Lukas%20Grinkevicius%2012%20vartininkas.png'
      })
      .eq('name', 'Lukas Grinkeviƒçius')
      .eq('team_key', 'BANGA A')

    if (lukasError) {
      console.error('‚ùå Error updating Lukas Grinkeviƒçius:', lukasError)
    } else {
      console.log('‚úÖ Updated Lukas Grinkeviƒçius image URL')
    }

    // Check for duplicate Lukas Grinkeviƒçius in BANGA B and remove if exists
    const { data: duplicateLukas, error: duplicateError } = await supabase
      .from('banga_playerss')
      .select('*')
      .eq('name', 'Lukas Grinkeviƒçius')
      .eq('team_key', 'BANGA B')

    if (duplicateError) {
      console.error('‚ùå Error checking for duplicate Lukas:', duplicateError)
    } else if (duplicateLukas && duplicateLukas.length > 0) {
      console.log('‚ö†Ô∏è  Found duplicate Lukas Grinkeviƒçius in BANGA B, removing...')
      
      const { error: deleteError } = await supabase
        .from('banga_playerss')
        .delete()
        .eq('name', 'Lukas Grinkeviƒçius')
        .eq('team_key', 'BANGA B')

      if (deleteError) {
        console.error('‚ùå Error deleting duplicate Lukas:', deleteError)
      } else {
        console.log('‚úÖ Removed duplicate Lukas Grinkeviƒçius from BANGA B')
      }
    }

    // Verify the updates
    console.log('\nüîç Verifying updates...')
    const { data: updatedPlayers, error: verifyError } = await supabase
      .from('banga_playerss')
      .select('name, image_url, team_key')
      .in('name', ['Pijus Srƒóbalius', 'Lukas Grinkeviƒçius'])

    if (verifyError) {
      console.error('‚ùå Error verifying updates:', verifyError)
    } else {
      console.log('üìã Updated players:')
      updatedPlayers?.forEach(player => {
        console.log(`  ${player.name} (${player.team_key}): ${player.image_url}`)
      })
    }

  } catch (error) {
    console.error('‚ùå Unexpected error:', error)
  }
}

fixNewPlayerImages()
